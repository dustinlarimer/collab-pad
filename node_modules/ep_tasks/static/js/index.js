var _, $, jQuery;
var $ = require('ep_etherpad-lite/static/js/rjquery').$;
var _ = require('ep_etherpad-lite/static/js/underscore');
//var Security = require('ep_etherpad-lite/static/js/security.js'); 

var padEditor;
var tags = ['task-open', 'task-done'];
exports.aceRegisterBlockElements = function(){
  return tags;
}

var syntaxRegexp = new RegExp(/^_/g);
var CustomRegexp = function(regexp){
  this.regexp = regexp;
};
CustomRegexp.prototype.exec = function(text) {
  return this.regexp.exec(text);
}

exports.tasks = {
	
	initialize: function(context){
		console.log('Hello, world!');
		/*context.ace.callWithAce(function(ace){
    	var doc = ace.ace_getDocument();
    	$(doc).find('#innerdocbody').on("click", _(exports.tasks.toggle_task_status).bind(ace));
    }, 'tasks', true);*/
	},
	
	detect_task_syntax: function(){
		// Remove "_ " text
		// trigger create_task_markup
	},
	create_task_markup: function(){
		console.log('create_task_markup fired!');
	},
	remove_task_markup: function(){
		
	},
	toggle_task_status: function(mode){
		/*console.log(mode);*/
		var rep = this.rep;
    var documentAttributeManager = this.documentAttributeManager;
    var isDone = documentAttributeManager.getAttributeOnLine(rep.selEnd[0], 'task-done');
    if (isDone) {
      documentAttributeManager.removeAttributeOnLine(rep.selEnd[0], 'task-done'); // remove the task list from the line
      documentAttributeManager.setAttributeOnLine(rep.selEnd[0], 'task-open', 'task-open'); // make it undone
    } else {
      documentAttributeManager.removeAttributeOnLine(rep.selEnd[0], 'task-open'); // remove the task list from the line
      documentAttributeManager.setAttributeOnLine(rep.selEnd[0], 'task-done', 'task-done'); // make it done
    }
	},
	update_task_status: function(){
		var ace = this;
    var target = event.target;
    var isTaskList = ($(target).hasClass("task-open") || $(target).hasClass("task-done"));
    var targetRight = event.target.offsetLeft + 14; // The right hand side of the checkbox -- remember the checkbox can be indented
    var isCheckbox = (event.pageX < targetRight); // was the click to the left of the checkbox
    if(!isTaskList || !isCheckbox){ return; } // Dont continue if we're not clicking a checkbox of a tasklist
		padEditor.callWithAce(function(ace){ // call the function to apply the attribute inside ACE
      ace.ace_toggle_task_status();
    }, 'tasks', true); // TODO what's the second attribute do here?
	}
	/*
	toggle_is_task: function(){
    var rep = this.rep;
    var documentAttributeManager = this.documentAttributeManager;
		
		// only continue if we have some caret position
    if (!(rep.selStart && rep.selEnd)){ return; }
		
    var firstLine = rep.selStart[0];
    var lastLine = Math.max(firstLine, rep.selEnd[0] - ((rep.selEnd[1] === 0) ? 1 : 0));
		
		// Process each line
    _(_.range(firstLine, lastLine + 1)).each(function(i){
      var istasklist = documentAttributeManager.getAttributeOnLine(i, 'task-open');
      if (!istasklist) {
				// Create
        documentAttributeManager.setAttributeOnLine(i, 'task-done', 'task-open');
      } else {
				// Remove
        documentAttributeManager.removeAttributeOnLine(i, 'task-open');
      }
    });
  }*/

};


exports.aceDomLineProcessLineAttributes = function(name, context) {
	var cls = context.cls;
	var domline = context.domline;
	
  if( cls.indexOf("task-open") !== -1) { var mode = "task-open"; }
  if( cls.indexOf("task-done") !== -1) { var mode = "task-done"; }
  var tagIndex = cls.indexOf(mode);
  if (tagIndex !== undefined && mode){
    var tag = tags[tagIndex];
    var modifier = {
      preHtml: '<div class="task-checkbox '+ mode +'">',
      postHtml: '</div>',
      processedMarker: true
    };
    return [modifier]; // return the modifier
  }
  return []; // or return nothing
};

exports.collectContentLineText = function(name, context){
	/*var text = context.text;
	if (text.substring(0, 1) == "_ ") {
		console.log('here is one');
		var edit = text.replace(/^_ /, "");
		return edit;
	}*/
}

exports.aceCreateDomLine = function(name, context) {
	var cls = context.cls;	
	if (cls.indexOf("task-open")!== -1 || cls.indexOf("task-done")!== -1){

		/*var modifier = {
			extraOpenTags: '',
			extraCloseTags: '',
			cls: ''
		}
		return [modifier];*/
		return []
	}
}

exports.aceAttribsToClasses = function(name, context) { 
	if (context.key == 'task-open' || context.key == 'task-done') {
		return [context.value];
	}
}

exports.aceGetFilterStack = function(name, context) {
	var linestylefilter = context.linestylefilter;
	var regexp = new CustomRegexp(syntaxRegexp);
  var filter = linestylefilter.getRegexpFilter(regexp, 'task-open');
  return [filter];
}

exports.aceInitialized = function(name, context){
  var editorInfo = context.editorInfo;
	editorInfo.ace_create_task_markup = _(exports.tasks.create_task_markup).bind(context); // What does underscore do here?
  editorInfo.ace_toggle_task_status = _(exports.tasks.toggle_task_status).bind(context); // TODO
  padEditor = context.editorInfo.editor;
}
exports.postAceInit = function(name, context){
	exports.tasks.initialize(context);
}
exports.aceInitInnerdocbodyHead = function(name, args, cb) {
  args.iframeHTML.push('<script type="text/javascript" src="/static/plugins/ep_tasks/static/js/ace_inner.js"></script>');
  return cb();
};
